// Copyright (c) 2018
// Commonwealth Scientific and Industrial Research Organisation (CSIRO)
// ABN 41 687 119 230
//
// Author: Kazys Stepanas
#ifndef HEIGHTMAP_H
#define HEIGHTMAP_H

#include "OhmConfig.h"

#include "Aabb.h"
#include "HeightmapMode.h"
#include "HeightmapVoxelType.h"
#include "KeyRange.h"
#include "OccupancyType.h"
#include "UpAxis.h"

#include <memory>

#include <glm/fwd.hpp>

#include <functional>
#include <set>
#include <vector>

namespace ohm
{
class Key;
class MapInfo;
class OccupancyMap;
class VoxelConst;
struct HeightmapDetail;
struct HeightmapVoxel;

namespace heightmap
{
struct DstVoxel;
struct SrcVoxel;
}  // namespace heightmap

/// A 2D voxel map variant which calculates a heightmap surface from another @c OccupancyMap .
///
/// The heightmap is built from an @c OccupancyMap and forms an axis aligned collapse of that map. The up axis may be
/// specified on construction of the heightmap, but must be aligned to a primary axis. The heightmap is built in
/// its own @c OccupancyMap , which consists of a single layer of voxels. The @c MapLayout for the heightmap is
/// two layers:
/// - **occupancy** layer
///   - float occupancy
/// - *heightmap* layer (named from @c HeightmapVoxel::kHeightmapLayer )
///   - @c HeightmapVoxel
///
/// The height specifies the absolute height of the surface, while clearance denotes how much room there is above
/// the surface voxel before the next obstruction. Note that the height values always increase going up, so the
/// height value will be inverted when using any @c UpAxis::kNegN @c UpAxis value. Similarly, the clearance is always
/// positive unless there are no further voxels above the surface, in which case the clearance is zero
/// (no information).
///
/// Each voxel in the heightmap represents a collapse of the source @c OccupancyMap based on a seed reference
/// position - see @c buildHeightmap() . The heightmap is generated by considering each column in the source map
/// relative to a reference height based on the seed position and neighbouring cells. When a valid supporting surface
/// is found, a heightmap voxel is marked as occupied and given a height associated with the supporting surface. This
/// supporting surface is the closest occupied voxel to the current reference position also having sufficient
/// clearance above it, @c minClearance() .
///
/// @par Virtual surfaces
/// The heightmap may also generate a 'virtual surface' from the interface between uncertain and free voxels when
/// @c generateVirtualSurface() is set. A 'virtual surface' voxel is simply a free voxel with an uncertain voxel below
/// it, but only in a column which does not have an occupied voxel within the search range. Virtual surface voxels
/// are marked as free in the heightmap.
///
/// The heightmap is generated either using a planar seach or a flood fill from the reference position. The planar
/// search operates at a fixed reference height at each column, while the flood fill search height is dependent on
/// the height of neighbour voxels. The flood fill is better at following surfaces, however it is significantly
/// slower.
///
/// Some variables limit the search for a supporting voxel in each column. To be considered as a support candidate, a
/// voxel must;
///
/// - Lie within the extents given to @c buildHeightmap()
/// - Must not be higher than the @c ceiling() height above its starting search position.
///
/// The generated heightmap may be accessed via @c heightmap() and voxel positions should be retrieved using
/// @c getHeightmapVoxelPosition() .
///
/// The @c OccupancyMap used to represent the heightmap has additional meta data stored in its @c MapInfo :
///
/// | Meta data                   | Description                                                                       |
/// | --------------------------- | --------------------------------------------------------------------------------  |
/// | *heightmap*                 | Present and true if this is a heightmap.                                          |
/// | *heightmap-axis*            | The up axis ID for a heightmap.                                                   |
/// | *heightmap-axis-x*          | The up axis X value for a heightmap.                                              |
/// | *heightmap-axis-y*          | The up axis Y value for a heightmap.                                              |
/// | *heightmap-axis-z*          | The up axis Z value for a heightmap.                                              |
/// | *heightmap-ceiling*         | The @c ceiling() value used in generating the heightmap.                          |
/// | *heightmap-clearance*       | The @c clearance() value used to generate the heightamp.                          |
/// | *heightmap-floor*           | The @c floor() value used in generating the heightmap.                            |
/// | *heightmap-mode*            | The @c mode() value used in generating the heightmap.                             |
/// | *heightmap-mode-name*       | An English translation of @c mode() .                                             |
/// | *heightmap-virtual-surface* | True if @c generateVirtualSurface() is set.                                       |
/// | *heightmap-virtual-surface-filter-threshold* | Value of @c virtualSurfaceFilterThreshold() .                    |
/// | *heightmap-virtual-surface-promote* | True if @c promoteVirtualBelow() is set                                   |
/// | *heightmap_seed_x*          | The X coordinate of the seed/reference position passed to @c buildHeightmap()     |
/// | *heightmap_seed_y*          | The Y coordinate of the seed/reference position passed to @c buildHeightmap()     |
/// | *heightmap_seed_z*          | The Z coordinate of the seed/reference position passed to @c buildHeightmap()     |
class ohm_API Heightmap
{
public:
  /// Size of regions in the heightmap. This is a 2D voxel extent. The region height is always one voxel.
  static const unsigned kDefaultRegionSize = 128;
  /// Voxel value assigned to heightmap cells which represent a real surface extracted from the source map.
  static constexpr float kHeightmapSurfaceValue = 1.0f;
  /// Voxel value assigned to heightmap cells which represent a virtual surface extracted from the source map.
  /// Virtual surfaces may be formed by the interface between a free voxel supported by an uncertain/null voxel.
  static constexpr float kHeightmapVirtualSurfaceValue = -1.0f;
  /// Voxel value assigned to heightmap cells which are deliberately vacant in the heightmap. This may occur when
  /// the corresponding voxels have no valid voxel in the entire column from the source map or when no ground voxel
  /// can be found for a layered search. In a layered heightmap there may be a mix of vacant and surface voxels in a
  /// single column in the heightmap.
  static constexpr float kHeightmapVacantValue = 0.0f;

  /// Construct a default initialised heightmap.
  Heightmap();

  /// Construct a new heightmap optionally tied to a specific @p map .
  /// @param grid_resolution The grid resolution for the heightmap. Should match the source map for best results.
  /// @param min_clearance The minimum clearance value expected above each surface voxel.
  /// @param up_axis Identifies the up axis for the map.
  /// @param region_size Grid size of each region in the heightmap.
  Heightmap(double grid_resolution, double min_clearance, UpAxis up_axis = UpAxis::kZ, unsigned region_size = 0);

  /// Destructor.
  ~Heightmap();

  /// Set number of threads to use in heightmap generation, enabling multi-threaded code path as required.
  ///
  /// Setting the @p thread_count to zero enables multi-threading using the maximum number of threads. Setting the
  /// @p thread_count to 1 disables threads (default).
  ///
  /// Using multiple threads may not yield significant gains.
  ///
  /// @param thread_count The number of threads to set.
  /// @return True if mult-threading is available. False when no mult-threading is available and @p thread_count is
  /// ignored.
  bool setThreadCount(unsigned thread_count);

  /// Get the number of threads to use.
  ///
  /// - 0: use all available
  /// - 1: force single threaded, or no multi-threading is available.
  /// - n: Use n threads.
  /// @return The number of threads to use.
  unsigned threadCount() const;

  /// Set the occupancy map on which to base the heightmap. The heightmap does not take ownership of the pointer so
  /// the @p map must persist until @c buildHeightmap() is called.
  void setOccupancyMap(const OccupancyMap *map);

  /// Access the current source occupancy map.
  const OccupancyMap *occupancyMap() const;

  /// Access the currently generated heightmap.
  OccupancyMap &heightmap() const;

  /// Set the search ceiling level. Searches are constrained to this ceiling height from the seed voxel. The effective
  /// ceiling varies depending on the active @c mode() . For @c HeightmapMode::kPlanar , the imposes a fixed limit. For
  /// all fill modes, the ceiling is relative to the current seed voxel. This means the absolute ceiling will run
  /// parallel to a slope.
  /// @param ceiling The new ceiling value in global map units. Positive to enable, but must be larger than half the
  /// source map voxel resolution to have any effect.
  void setCeiling(double ceiling);

  /// Get the search ceiling level. See @c setCeiling() .
  /// @return The search ceiling value in global map units.
  double ceiling() const;

  /// Set the search floor level. Searches are constrained to search down only to this floor height from the seed voxel.
  /// The same effective constraints apply for the floor as do for @c setCeiling() .
  /// @param floor The new floor value in global map units. Positive to enable, but must be larger than half the source
  /// map voxel resolution to have any effect.
  void setFloor(double floor);

  /// Get the search floor level. See @c setCeiling() .
  /// @return The search floor value in global map units.
  double floor() const;

  /// Set the minimum clearance required above a voxel in order to consider it a heightmap voxel.
  /// @param clearance The new clearance value.
  void setMinClearance(double clearance);

  /// Get the minimum clearance required above a voxel in order to consider it a heightmap voxel.
  /// @return The height clearance value.
  double minClearance() const;

  /// Sets whether voxel mean positions are ignored (true) forcing the use of voxel centres.
  /// @param ignore True to force voxel centres even when voxel mean positions are present.
  void setIgnoreVoxelMean(bool ignore);

  /// Force voxel centres even when voxel mean positions are present?
  /// @return True to ignore voxel mean positioning.
  /// @see @ref voxelmean
  bool ignoreVoxelMean() const;

  /// Set the generation of a heightmap floor around the transition from unknown to free voxels?
  ///
  /// This option allows a heightmap floor to be generated in columns where there is no clear occupied floor voxel.
  /// When enabled, the heightmap generates a floor level at the lowest transition point from unknown to free voxel.
  ///
  /// @param enable Enable this option?
  void setGenerateVirtualSurface(bool enable);

  /// Allow the generation of a heightmap floor around the transition from unknown to free voxels?
  ///
  /// @see @c setGenerateVirtualSurface()
  ///
  /// @return True if this option is enabled.
  bool generateVirtualSurface() const;

  /// Set whether virtual surface candidates below the reference position are preferred to real above.
  ///
  /// When building a heightmap column, the default behaviour is for virtual surfaces to be reported only if the
  /// search expanse does not include a real occupied voxel from which a real surface can be derived. This option
  /// changes the behaviour to make a virtual surface candidate which lies below the reference position a preferred
  /// seed candidate to an occupied voxel which lies above the reference position. This can generate better ground
  /// results where the ground cannot be properly observed.
  ///
  /// @param enable True to promote virtual candidate below the reference position.
  void setPromoteVirtualBelow(bool enable);

  /// Query whether virtual surface voxels below the reference position are preferred to real voxels above.
  ///
  /// @see @c setPromoteVirtualBelow()
  ///
  /// @return True to prefer virtual voxels below the reference position.
  bool promoteVirtualBelow() const;

  /// Sets the heightmap generation mode. May be modified between calls to @c buildHeightmap()
  /// @param mode The target mode.
  void setMode(HeightmapMode mode);

  /// Query the heightmap generation mode. The default is @c kPlanar .
  /// @return The current heightmap generation mode.
  HeightmapMode mode() const;

  /// Query if this object is set to generate a heightmap with multiple layers.
  /// @return True when generating a multi-layered heightmap.
  inline bool isMultiLayered() const
  {
    return mode() == HeightmapMode::kLayeredFillUnordered || mode() == HeightmapMode::kLayeredFill;
  }

  /// Query if the resulting multi-layered heightmap has each column ordered by height. Implies @c isMultiLayered() .
  /// @return True if the heightmap contains columns sorted in height order.
  inline bool areLayersSorted() const { return mode() == HeightmapMode::kLayeredFill; }

  /// Set the number of occupied neighbours a virtual surface voxel needs to be kept in a @c HeightmapMode::kLayeredFill
  /// map.
  ///
  /// When non-zero and using @c mode() @c HeightmapMode::kLayeredFill , this value enables filtering out of virtual
  /// surface voxels which have fewer occupied neighours than this value. This can help reduce "virtual surface noise"
  /// in maps which have sparse free space observations.
  ///
  /// This setting only works with @c mode() @c HeightmapMode::kLayeredFill .
  ///
  /// Neighbours are the 26 voxels sharing a face, edge or vertex with the voxel of interest.
  ///
  /// @param threshold Number of occupied neighbours required to keep a virtual surface voxel. Theoretical range is
  /// [0, 26], with a pragmatic range of approximately [0, 8].
  void setVirtualSurfaceFilterThreshold(unsigned threshold);

  /// Query the virtual surface filtering threshold. See @c setVirtualSurfaceFilterThreshold() .
  unsigned virtualSurfaceFilterThreshold() const;

  /// Set the heightmap generation to flood fill ( @c true ) or planar ( @c false ).
  ///
  /// @deprecated Use @c setMode(HeightmapMode::kSimpleFill) .
  ///
  /// @param flood_fill True to enable the flood fill technique.
  inline void setUseFloodFill(bool flood_fill)
  {
    setMode(flood_fill ? HeightmapMode::kSimpleFill : HeightmapMode::kPlanar);
  }

  /// Is the flood fill generation technique in use ( @c true ) or planar technique ( @c false ).
  ///
  /// @deprecated Check @c mode() against @c HeightmapMode::kSimpleFill .
  ///
  /// @return True when using flood fill.
  inline bool useFloodFill() const { return mode() == HeightmapMode::kSimpleFill; }

  /// The layer number which contains @c HeightmapVoxel structures.
  /// @return The heightmap layer index or -1 on error (not present).
  /// @see @ref voxelmean
  int heightmapVoxelLayer() const;

  /// The layer number which contains @c HeightmapVoxel structures during heightmap construction.
  /// @return The heightmap build layer index or -1 on error (not present).
  int heightmapVoxelBuildLayer() const;

  /// Get the up axis identifier used to generate the heightmap.
  UpAxis upAxis() const;

  /// Get the up axis index [0, 2] marking XYZ respectively. Ignores direction.
  int upAxisIndex() const;

  /// Get the normal vector for the up axis used with last @c buildHeightmap() .
  const glm::dvec3 &upAxisNormal() const;

  /// Component index of the first surface axis normal [0, 2].
  int surfaceAxisIndexA() const;

  /// Get a unit vector which lies along the surface of the heightmap, perpendicular to @c surfaceAxisB() and
  /// upAxisNormal().
  const glm::dvec3 &surfaceAxisA() const;

  /// Component of the second surface axis normal [0, 2].
  int surfaceAxisIndexB() const;

  /// Get a unit vector which lies along the surface of the heightmap, perpendicular to @c surfaceAxisA() and
  /// upAxisNormal().
  const glm::dvec3 &surfaceAxisB() const;

  /// Static resolution of @c Axis to a normal.
  /// @param axis_id The @c Axis ID.
  static const glm::dvec3 &upAxisNormal(UpAxis axis_id);

  /// Get a unit vector which lies along the surface of the heightmap, perpendicular to @c surfaceAxisB() and
  /// upAxisNormal().
  static const glm::dvec3 &surfaceAxisA(UpAxis axis_id);

  /// Get a unit vector which lies along the surface of the heightmap, perpendicular to @c surfaceAxisA() and
  /// upAxisNormal().
  static const glm::dvec3 &surfaceAxisB(UpAxis axis_id);

  /// Generate the heightmap around a reference position. This sets the @c base_height as in the overload, but also
  /// changes the behaviour to flood fill out from the reference position.
  ///
  /// @param reference_pos The staring position to build a heightmap around. Nominally a vehicle or sensor position.
  /// @param cull_to Build the heightmap only from within these extents in the source map.
  /// @return true on success.
  bool buildHeightmap(const glm::dvec3 &reference_pos, const ohm::Aabb &cull_to = ohm::Aabb(0.0));

  /// Query the information about a voxel in the @c heightmap() occupancy map.
  ///
  /// Heightmap voxel values, positions and semantics are specialised from the general @c OccupancyMap usage. This
  /// method may be used to ensure the correct position values are retrieved and consistent voxel interpretations
  /// are made. All position queries should be made via this function. The return value is used indicate whether
  /// the voxel is relevant/occupied within the occupancy map.
  ///
  /// @param key The key of the voxel to test for validity and to retrieve the position and details of. If this key
  ///            does not map to a valid voxel in the @p heightmap() of this object a @c HeightmapVoxel::Unknown
  ///            value will be returned.
  /// @param[out] pos The retrieved position of @p heightmap_voxel . Only valid when this function returns something
  ///             other than @c HeightmapVoxel::Unknown .
  /// @param[out] voxel_info Clearance and height details of the voxel associated with @p key. Only valid when this
  ///             function returns something other than @c HeightmapVoxel::Unknown .
  /// @return The type of the voxel in question. May return @c HeightmapVoxel::Unknown if @p key is invalid.
  HeightmapVoxelType getHeightmapVoxelInfo(const Key &key, glm::dvec3 *pos, HeightmapVoxel *voxel_info = nullptr) const;

  /// Calculate the height of the voxel at @p key with matching local @p height value.
  ///
  /// This calculates the centre of the voxel at @p key then calculates `dot(up, centre) + height`.
  ///
  /// @param key The heightmap voxel key of interest. The up axis should always be (0, 0) for non-layered heightmaps.
  /// @param height The local voxel height delta.
  /// @return The global voxel height value.
  double getVoxelHeight(const Key &key, double height) const;

  /// Calculate the height of the voxel at @p key with matching @c HeightmapVoxel @p info .
  ///
  /// This calls through to @c getVoxelHeight(key,height) using the value @p info.height .
  ///
  /// @param key The heightmap voxel key of interest. The up axis should always be (0, 0) for non-layered heightmaps.
  /// @param info The voxel heightmap data.
  /// @return The global voxel height value.
  double getVoxelHeight(const Key &key, const HeightmapVoxel &info) const;

  //-------------------------------------------------------
  // Internal
  //-------------------------------------------------------

  /// Internal heightmap detail access.
  /// @return Internal heightmap details.
  inline HeightmapDetail *detail() { return imp_.get(); }
  /// Internal heightmap detail access.
  /// @return Internal heightmap details.
  inline const HeightmapDetail *detail() const { return imp_.get(); }

  /// Update @c info to reflect the details of how the heightmap is generated. See class comments.
  /// @param info The info object to update.
  void updateMapInfo(MapInfo &info) const;

  /// Ensure that @p key is referencing a voxel within the heightmap plane.
  /// @param[in,out] key The key to project. May be modified by this call. Must not be null.
  /// @return A reference to @p key .
  Key &project(Key *key) const;

private:
  /// Build a key range which covers the source map extents in 2D, but limits the vertical range by the floor/ceiling
  /// around @p reference_pos .
  /// @param min_key The source map minimum extents key.
  /// @param max_key The source map maximum extents key.
  /// @param reference_pos The reference position to build the heightmap from. Only the vertical component is used.
  /// @return The key range creating an extended planar slice through the source map.
  KeyRange buildReferencePlaneSlice(Key min_key, Key max_key, const glm::dvec3 &reference_pos) const;

  /// Internal implementation of heightmap construction. Supports the different key walking techniques available.
  /// @param walker The key walker used to iterate the source map and heightmap overlap.
  /// @param reference_pos Reference position around which to generate the heightmap
  /// @param on_visit Optional callback invoked for each key visited. Parameters are: @p walker , this object's
  ///   internal details, the candidate key first evaluated for the column search start, the ground key to be migrated
  ///   to the heightmap. Both keys reference the source map.
  template <typename KeyWalker>
  bool buildHeightmapT(KeyWalker &walker, const glm::dvec3 &reference_pos, unsigned initial_supporting_flags,
                       unsigned iterating_supporting_flags);

  /// Helper function for adding a surface, or virtual surface voxel from @c buildHeightmapT() .
  ///
  /// @param hm_voxel Destination voxel management structure - references the target heightmap @c OccupancyMap .
  ///     This will be modified to match the heightmap voxel corresponding to @p src_voxel . It is passed as an argument
  ///     for caching efficiency and could otherwise be omitted.
  /// @param src_voxel Source voxel management structure - references the source @c OccupancyMap and identifies the
  ///     voxel from the source map to be added to the heightmap. Must be valid.
  /// @param voxel_type The @c OccupancyType associated with @c src_voxel .
  /// @param clearance The available height clearance above @p src_voxel being added.
  /// @param voxel_pos The position of @c src_voxel . Will use sub-voxel positioning if available and allowed otherwise
  ///     marks the voxel centre.
  /// @param multi_layer_keys Set of heightmap map keys which identify columns containing more than one voxel. Will
  ///     be added to if the @p hm_voxel already has voxel data and we are building a layered heightmap.
  /// @param is_base_layer_candidate Should be true if the @c src_voxel falls within the allowed range for being
  ///     included in the base layer. Should always be true for non-layered heightmaps.
  /// @return The voxel type in the heightmap. One of @c kSurface, @c kVirtualSurface, @c kUnknown where the latter
  /// indicates no voxel has not been added to the heightmap.
  HeightmapVoxelType addSurfaceVoxel(heightmap::DstVoxel &hm_voxel, const heightmap::SrcVoxel &src_voxel,
                                     OccupancyType voxel_type, double clearance, glm::dvec3 voxel_pos,
                                     std::set<ohm::Key> &multi_layer_keys, bool is_base_layer_candidate);

  std::unique_ptr<HeightmapDetail> imp_;
};  // namespace ohm
}  // namespace ohm

#endif  // HEIGHTMAP_H
